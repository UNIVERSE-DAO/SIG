name: Verify SIG2 (ETH)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  verify-sig2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install ethereumjs-util
        run: npm install ethereumjs-util

      - name: Verify ETH signatures manually
        run: |
          mkdir -p verify
          REPORT="verify/sig2-hash-verify-report.txt"

          echo "üßæ SIG2 ETH Signature Verification Report (Manual - UTF8 Fix)" > "$REPORT"
          echo "Generated: $(date -u)" >> "$REPORT"
          echo "" >> "$REPORT"

          for FILE in messages/ChM-*.txt; do
            FILENAME=$(basename "$FILE")
            CHM_ID="${FILENAME%.txt}"
            CHM_HASH=$(grep '^ChM-HASH:' "$FILE" | cut -d':' -f2- | xargs)
            C_HASH=$(grep '^C-HASH:' "$FILE" | cut -d':' -f2- | xargs)

            CHP_FILE=$(find CHP/ -type f -name "CHP-*.chp" -exec sha256sum {} \; | grep "$C_HASH" | awk '{print $2}' || true)

            echo "‚ñ∂ $FILENAME" >> "$REPORT"

            if [ -z "$CHP_FILE" ]; then
              echo "‚ùå No CHP file found with matching C-HASH ($C_HASH)" >> "$REPORT"
              echo "" >> "$REPORT"
              continue
            fi

            SIG2_ADDR=$(awk '/^\[ETH\]/ {found=1; next} found && /^Address:/ {print $2; exit}' "$CHP_FILE")
            if [ -z "$SIG2_ADDR" ]; then
              echo "‚ùå No ETH address in $CHP_FILE" >> "$REPORT"
              echo "" >> "$REPORT"
              continue
            fi

            SIG_FILE="signers/SIG2/SIG2-$FILENAME.sig"
            if [ ! -f "$SIG_FILE" ]; then
              echo "SIG2 ($SIG2_ADDR): ‚ùå Missing signature file ($SIG_FILE)" >> "$REPORT"
              echo "" >> "$REPORT"
              continue
            fi

            SIG=$(cat "$SIG_FILE" | tr -d '\n')

            echo "
            const ethUtil = require('ethereumjs-util');

            const messageHash = '${CHM_HASH}';
            const signature = '${SIG}';
            const expectedAddress = '${SIG2_ADDR}';

            try {
              const msgBuffer = Buffer.from(messageHash, 'utf8');
              const prefix = '\\x19Ethereum Signed Message:\\n' + msgBuffer.length;
              const prefixedMsg = Buffer.concat([
                Buffer.from(prefix),
                msgBuffer
              ]);

              const msgHash = ethUtil.keccak256(prefixedMsg);

              const sigBuf = ethUtil.toBuffer(signature);
              const r = sigBuf.slice(0, 32);
              const s = sigBuf.slice(32, 64);
              let v = sigBuf[64];
              if (v < 27) v += 27;

              const pubKey = ethUtil.ecrecover(msgHash, v, r, s);
              const recoveredAddress = ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));

              if (recoveredAddress.toLowerCase() === expectedAddress.toLowerCase()) {
                console.log('‚úÖ Recovered:', recoveredAddress);
                process.exit(0);
              } else {
                console.log('‚ùå Recovered:', recoveredAddress);
                process.exit(1);
              }
            } catch (e) {
              console.log('‚ùå JS Error:', e.message);
              process.exit(1);
            }
            " > verify.js

            if node verify.js; then
              echo "SIG2 ($SIG2_ADDR): ‚úÖ Valid ETH signature of ChM-HASH" >> "$REPORT"
            else
              echo "SIG2 ($SIG2_ADDR): ‚ùå Invalid ETH signature" >> "$REPORT"
            fi

            echo "" >> "$REPORT"
          done

      - name: Commit and push report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add verify/sig2-hash-verify-report.txt
          git commit -m "üîç Manual verify SIG2 ETH signatures (fixed for Etherscan-style)" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git pull --rebase origin main || echo "Rebase skipped"
          git push origin main
